#pragma version 10
#pragma typetrack false

// app.Eval.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2
    bytecblock 0x80 0x151f7c75 "q1" "q2" "q3" "q4"
    // app.py:20
    // class Eval(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x91dfa024 0xceee6c1a 0xc7b9bbb3 0x4f54e787 0xa72aceed // method "add_students(account)void", method "claim_algo()void", method "opt_in_to_asset(pay,asset)void", method "sum(byte[])uint64", method "update_box(string)string"
    txna ApplicationArgs 0
    match main_add_students_route@5 main_claim_algo_route@6 main_opt_in_to_asset_route@7 main_sum_route@8 main_update_box_route@9

main_after_if_else@12:
    // app.py:20
    // class Eval(ARC4Contract):
    intc_1 // 0
    return

main_update_box_route@9:
    // app.py:70
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:20
    // class Eval(ARC4Contract):
    txna ApplicationArgs 1
    // app.py:70
    // @arc4.abimethod()
    callsub update_box
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_sum_route@8:
    // app.py:58
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:20
    // class Eval(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // app.py:58
    // @arc4.abimethod
    callsub sum
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_opt_in_to_asset_route@7:
    // app.py:44
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:20
    // class Eval(ARC4Contract):
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // app.py:44
    // @arc4.abimethod
    callsub opt_in_to_asset
    intc_0 // 1
    return

main_claim_algo_route@6:
    // app.py:33
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claim_algo
    intc_0 // 1
    return

main_add_students_route@5:
    // app.py:28
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // app.py:20
    // class Eval(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // app.py:28
    // @arc4.abimethod()
    callsub add_students
    intc_0 // 1
    return

main_bare_routing@10:
    // app.py:20
    // class Eval(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// app.Eval.add_students(account: bytes) -> void:
add_students:
    // app.py:28-29
    // @arc4.abimethod()
    // def add_students(self, account: Account) -> None:
    proto 1 0
    // app.py:30
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // app.py:31
    // self.q4_string[account] = arc4.String(" ")
    frame_dig -1
    box_del
    pop
    frame_dig -1
    pushbytes 0x000120
    box_put
    retsub


// app.Eval.claim_algo() -> void:
claim_algo:
    // app.py:35
    // assert Txn.sender in self.q4_string
    txn Sender
    box_len
    bury 1
    assert
    // app.py:36
    // assert Txn.sender not in self.q1
    bytec_2 // "q1"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert
    // app.py:37
    // self.q1[Txn.sender] = arc4.Bool(True)
    bytec_2 // "q1"
    txn Sender
    concat
    bytec_0 // 0x80
    box_put
    // app.py:38-42
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=500_000,
    //     fee=2*op.Global.min_txn_fee
    // ).submit()
    itxn_begin
    // app.py:41
    // fee=2*op.Global.min_txn_fee
    intc_2 // 2
    global MinTxnFee
    *
    // app.py:39
    // receiver=Txn.sender,
    txn Sender
    // app.py:40
    // amount=500_000,
    pushint 500000 // 500000
    itxn_field Amount
    itxn_field Receiver
    // app.py:38
    // itxn.Payment(
    intc_0 // pay
    itxn_field TypeEnum
    itxn_field Fee
    // app.py:38-42
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=500_000,
    //     fee=2*op.Global.min_txn_fee
    // ).submit()
    itxn_submit
    retsub


// app.Eval.opt_in_to_asset(mbr_pay: uint64, asset: uint64) -> void:
opt_in_to_asset:
    // app.py:44-45
    // @arc4.abimethod
    // def opt_in_to_asset(self, mbr_pay: gtxn.PaymentTransaction, asset: Asset) -> None:
    proto 2 0
    // app.py:46
    // assert Txn.sender in self.q4_string
    txn Sender
    box_len
    bury 1
    assert
    // app.py:47
    // assert Txn.sender not in self.q2
    bytec_3 // "q2"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert
    // app.py:48
    // self.q2[Txn.sender] = arc4.Bool(True)
    bytec_3 // "q2"
    txn Sender
    concat
    bytec_0 // 0x80
    box_put
    // app.py:49
    // assert not Global.current_application_address.is_opted_in(asset)
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // app.py:50
    // assert mbr_pay.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // app.py:51
    // assert mbr_pay.amount == Global.min_balance + Global.asset_opt_in_min_balance
    frame_dig -2
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // app.py:52-56
    // itxn.AssetTransfer(
    //     xfer_asset=asset.id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // app.py:54
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // app.py:55
    // asset_amount=0,
    intc_1 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // app.py:52
    // itxn.AssetTransfer(
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // app.py:52-56
    // itxn.AssetTransfer(
    //     xfer_asset=asset.id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    retsub


// app.Eval.sum(array: bytes) -> uint64:
sum:
    // app.py:58-59
    // @arc4.abimethod
    // def sum(self, array: Bytes) -> UInt64:
    proto 1 1
    // app.py:60
    // assert Txn.sender in self.q4_string
    txn Sender
    box_len
    bury 1
    assert
    // app.py:61
    // assert Txn.sender not in self.q3
    bytec 4 // "q3"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert
    // app.py:62
    // self.q3[Txn.sender] = arc4.Bool(True)
    bytec 4 // "q3"
    txn Sender
    concat
    bytec_0 // 0x80
    box_put
    // app.py:63
    // assert array.length == 2
    frame_dig -1
    len
    dup
    intc_2 // 2
    ==
    assert
    // app.py:65
    // total = UInt64(0)
    intc_1 // 0
    dup

sum_for_header@1:
    // app.py:66
    // for n in array:
    frame_dig 2
    frame_dig 0
    <
    bz sum_after_for@4
    // app.py:67
    // total += op.btoi(n)
    frame_dig -1
    frame_dig 2
    dup
    cover 2
    getbyte
    frame_dig 1
    +
    frame_bury 1
    intc_0 // 1
    +
    frame_bury 2
    b sum_for_header@1

sum_after_for@4:
    // app.py:68
    // return total
    frame_dig 1
    frame_bury 0
    retsub


// app.Eval.update_box(value: bytes) -> bytes:
update_box:
    // app.py:70-71
    // @arc4.abimethod()
    // def update_box(self, value: arc4.String) -> arc4.String:
    proto 1 1
    // app.py:72
    // assert Txn.sender in self.q4_string
    txn Sender
    box_len
    bury 1
    assert
    // app.py:73
    // assert Txn.sender not in self.q4
    bytec 5 // "q4"
    txn Sender
    concat
    box_len
    bury 1
    !
    assert
    // app.py:74
    // self.q4[Txn.sender] = arc4.Bool(True)
    bytec 5 // "q4"
    txn Sender
    concat
    bytec_0 // 0x80
    box_put
    // app.py:75
    // self.q4_string[Txn.sender] = value
    txn Sender
    dup
    box_del
    pop
    frame_dig -1
    box_put
    // app.py:76
    // return self.q4_string[Txn.sender]
    txn Sender
    box_get
    assert // check self.q4_string entry exists
    retsub
